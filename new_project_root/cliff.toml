# git-cliff ~ default configuration file
# https://git-cliff.org/docs/configuration
#
# Lines starting with "#" are comments.
# Configuration options are organized into tables and keys.
# See documentation for more information on available options.

[bump]
breaking_always_bump_major = false
features_always_bump_minor = true

[changelog]
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}
        - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
            {% if commit.breaking %}[**breaking**] {% endif %}\
            {{ commit.message | upper_first }}\
    {% endfor %}
{% endfor %}\n
"""
# template for the changelog header
header = """
# Changelog\n
"""
# postprocessors
postprocessors = [
  {pattern = "bump", replace = "update"}
]
# remove the leading and trailing s
trim = true

[git]
# regex for parsing and grouping commits
commit_parsers = [
  {message = "^feat", group = "<!-- 0 -->🚀 Features"},
  {message = "^fix", group = "<!-- 1 -->🐛 Bug Fixes"},
  {message = "^doc", group = "<!-- 3 -->📚 Documentation"},
  {message = "^perf", group = "<!-- 4 -->⚡ Performance"},
  {message = "^refactor", group = "<!-- 2 -->🚜 Refactor"},
  {message = "^style", group = "<!-- 5 -->🎨 Styling"},
  {message = "^test", group = "<!-- 6 -->🧪 Testing"},
  {message = "^build", group = "<!-- 7 -->🦾 Build"},
  {message = "^ci", group = "<!-- 8 -->🐙 CI/CD"},
  {message = "^chore", skip = true},
  {message = "^revert", group = "<!-- 9 -->◀️ Revert"},
  {message = ".*", group = "<!-- 10 -->💼 Other"}
]
# regex for preprocessing the commit messages
commit_preprocessors = [
]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not matched by commit parsers
filter_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# process each line of a commit as an individual commit
split_commits = false
# sort the tags topologically
topo_order = false
